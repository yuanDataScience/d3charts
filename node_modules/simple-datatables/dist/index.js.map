{"version":3,"file":"index.js","sources":["../src/helpers.js","../src/rows.js","../src/columns.js","../src/table.js","../src/config.js","../src/datatable.js"],"sourcesContent":["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b) => {\n    let c\n    let d\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && a[f].value > a[f + b].value) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n","import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt, rows) {\n        this.dt = dt\n        this.rows = rows\n\n        return this\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns().rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == 'all') {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns().rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n}\n","import {sortItems} from \"./helpers\"\n\n/**\n * Columns API\n * @param {Object} instance DataTable instance\n * @param {Mixed} columns  Column index or array of column indexes\n */\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n        return this\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0;\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute('data-content') ? cell.getAttribute('data-content') : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === 'function' ? rowFilter(content) : content === rowFilter;\n        })\n\n        dt.data = filteredRows\n        this.rebuild()\n        dt.update()\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return;\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute('data-content') ? cell.getAttribute('data-content') : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase() : content,\n                        row: tr\n                    }\n                }\n            })\n\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1)\n                btm = sortItems(numeric, -1)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n            } else {\n                top = sortItems(numeric, 1)\n                btm = sortItems(alpha, 1)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n","import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.table.tHead !== null) {\n            this.table.removeChild(this.table.tHead)\n        }\n        this.table.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.table.tBodies.length) {\n            this.table.removeChild(this.table.tBodies[0])\n        }\n        this.table.appendChild(tbody)\n    }\n}\n","/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"▴\",\n    descText: \"▾\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    footer: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n","import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    isJson,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n        this.initialized = false\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        if (typeof table === \"string\") {\n            table = document.querySelector(table)\n        }\n\n        this.initialLayout = table.innerHTML\n        this.initialSortable = this.options.sortable\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (table.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (table.tBodies.length && !table.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.table = table\n\n        this.init()\n    }\n\n    /**\n     * Add custom property or method to extend DataTable\n     * @param  {String} prop    - Method name or property\n     * @param  {Mixed} val      - Function or property value\n     * @return {Void}\n     */\n    static extend(prop, val) {\n        if (typeof val === \"function\") {\n            DataTable.prototype[prop] = val\n        } else {\n            DataTable[prop] = val\n        }\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.table.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n\n            if (this.options.plugins) {\n                Object.entries(this.options.plugins).forEach(([plugin, options]) => {\n                    if (this[plugin] && typeof this[plugin] === \"function\") {\n                        this[plugin] = this[plugin](options, {createElement})\n\n                        // Init plugin\n                        if (options.enabled && this[plugin].init && typeof this[plugin].init === \"function\") {\n                            this[plugin].init()\n                        }\n                    }\n                })\n            }\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render(type) {\n        if (type) {\n            switch (type) {\n            case \"page\":\n                this.renderPage()\n                break\n            case \"pager\":\n                this.renderPager()\n                break\n            case \"header\":\n                this.renderHeader()\n                break\n            }\n\n            return false\n        }\n\n        const options = this.options\n        let template = \"\"\n\n        // Convert data to HTML\n        if (options.data) {\n            dataToTable.call(this)\n        }\n\n        if (options.ajax) {\n            const ajax = options.ajax\n            const xhr = new XMLHttpRequest()\n\n            const xhrProgress = e => {\n                this.emit(\"datatable.ajax.progress\", e, xhr)\n            }\n\n            const xhrLoad = e => {\n                if (xhr.readyState === 4) {\n                    this.emit(\"datatable.ajax.loaded\", e, xhr)\n\n                    if (xhr.status === 200) {\n                        const obj = {}\n                        obj.data = ajax.load ? ajax.load.call(this, xhr) : xhr.responseText\n\n                        obj.type = \"json\"\n\n                        if (ajax.content && ajax.content.type) {\n                            obj.type = ajax.content.type\n\n                            Object.assign(obj, ajax.content)\n                        }\n\n                        this.import(obj)\n\n                        this.setColumns(true)\n\n                        this.emit(\"datatable.ajax.success\", e, xhr)\n                    } else {\n                        this.emit(\"datatable.ajax.error\", e, xhr)\n                    }\n                }\n            }\n\n            const xhrFailed = e => {\n                this.emit(\"datatable.ajax.error\", e, xhr)\n            }\n\n            const xhrCancelled = e => {\n                this.emit(\"datatable.ajax.abort\", e, xhr)\n            }\n\n            xhr.addEventListener(\"progress\", xhrProgress, false)\n            xhr.addEventListener(\"load\", xhrLoad, false)\n            xhr.addEventListener(\"error\", xhrFailed, false)\n            xhr.addEventListener(\"abort\", xhrCancelled, false)\n\n            this.emit(\"datatable.ajax.loading\", xhr)\n\n            xhr.open(\"GET\", typeof ajax === \"string\" ? options.ajax : options.ajax.url)\n            xhr.send()\n        }\n\n        // Store references\n        this.body = this.table.tBodies[0]\n        this.head = this.table.tHead\n        this.foot = this.table.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.table.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.table.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = !options.ajax\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!options.header) {\n            if (this.head) {\n                this.table.removeChild(this.table.tHead)\n            }\n        }\n\n        // Footer\n        if (options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.table.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.table.removeChild(this.table.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += options.layout.top\n        template += \"</div>\"\n        if (options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (options.paging && options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            options.perPageSelect.forEach(val => {\n                const selected = val === options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.render(\"header\")\n        }\n\n        // Add table class\n        this.table.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const w = createElement(\"div\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\")\n        w.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, w.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.table.parentNode.replaceChild(this.wrapper, this.table)\n        this.container.appendChild(this.table)\n\n        // Store the table dimensions\n        this.rect = this.table.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n        if (!options.ajax) {\n            this.setColumns()\n        }\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage() {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows().render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        const options = this.options\n        // Per page selector\n        if (options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target\n            if (t.nodeName.toLowerCase() === \"a\") {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns().sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n\n        window.addEventListener(\"resize\", () => {\n            this.rect = this.container.getBoundingClientRect()\n            this.fixColumns()\n        })\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns().hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns().sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            if (this.selectedColumns.length) {\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.selectedColumns.includes(i)) {\n                            this.columnRenderers.forEach(options => {\n                                if (options.columns.includes(i)) {\n                                    cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                                }\n                            })\n                        }\n                    })\n                })\n            }\n\n            this.columns().rebuild()\n        }\n\n        this.render(\"header\")\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.table.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.table.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.table, this.wrapper)\n\n        this.initialized = false\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate(this)\n        this.render(\"page\")\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.render(\"pager\")\n\n        this.rows().update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        const perPage = this.options.perPage\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % perPage === 0 ? rows.slice(i, i + perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.table.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = '0px'\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.table.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.table.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.table.tHead\n                    this.table.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.table.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            '0',\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = 'scroll'\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.table.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.table.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns(cell.cellIndex).visible())\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.table.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute('data-content') ? cell.getAttribute('data-content') : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns(cell.cellIndex).visible()\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noRows)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.render(\"page\")\n        this.render(\"pager\")\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns().sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.render(\"header\")\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows().add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.table\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Export table to various formats (csv, txt or sql)\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    export(userOptions) {\n        if (!this.hasHeadings && !this.hasRows) return false\n\n        const headers = this.activeHeadings\n        let rows = []\n        const arr = []\n        let i\n        let x\n        let str\n        let link\n\n        const defaults = {\n            download: true,\n            skipColumn: [],\n\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n\n            // sql\n            tableName: \"myTable\",\n\n            // json\n            replacer: null,\n            space: 4\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.type) {\n            if (options.type === \"txt\" || options.type === \"csv\") {\n                // Include headings\n                rows[0] = this.header\n            }\n\n            // Selection or whole table\n            if (options.selection) {\n                // Page number\n                if (!isNaN(options.selection)) {\n                    rows = rows.concat(this.pages[options.selection - 1])\n                } else if (Array.isArray(options.selection)) {\n                    // Array of page numbers\n                    for (i = 0; i < options.selection.length; i++) {\n                        rows = rows.concat(this.pages[options.selection[i] - 1])\n                    }\n                }\n            } else {\n                rows = rows.concat(this.activeRows)\n            }\n\n            // Only proceed if we have data\n            if (rows.length) {\n                if (options.type === \"txt\" || options.type === \"csv\") {\n                    str = \"\"\n\n                    for (i = 0; i < rows.length; i++) {\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                let text = rows[i].cells[x].textContent\n                                text = text.trim()\n                                text = text.replace(/\\s{2,}/g, ' ')\n                                text = text.replace(/\\n/g, '  ')\n                                text = text.replace(/\"/g, '\"\"')\n                                //have to manually encode \"#\" as encodeURI leaves it as is.\n                                text = text.replace(/#/g, \"%23\")\n                                if (text.includes(\",\"))\n                                    text = `\"${text}\"`\n\n\n                                str += text + options.columnDelimiter\n                            }\n                        }\n                        // Remove trailing column delimiter\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // Apply line delimiter\n                        str += options.lineDelimiter\n                    }\n\n                    // Remove trailing line delimiter\n                    str = str.trim().substring(0, str.length - 1)\n\n                    if (options.download) {\n                        str = `data:text/csv;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"sql\") {\n                    // Begin INSERT statement\n                    str = `INSERT INTO \\`${options.tableName}\\` (`\n\n                    // Convert table headings to column names\n                    for (i = 0; i < headers.length; i++) {\n                        // Check for column skip and column visibility\n                        if (\n                            !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                            this.columns(headers[i].originalCellIndex).visible()\n                        ) {\n                            str += `\\`${headers[i].textContent}\\`,`\n                        }\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Begin VALUES\n                    str += \") VALUES \"\n\n                    // Iterate rows and convert cell data to column values\n                    for (i = 0; i < rows.length; i++) {\n                        str += \"(\"\n\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                str += `\"${rows[i].cells[x].textContent}\",`\n                            }\n                        }\n\n                        // Remove trailing comma\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // end VALUES\n                        str += \"),\"\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Add trailing colon\n                    str += \";\"\n\n                    if (options.download) {\n                        str = `data:application/sql;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"json\") {\n                    // Iterate rows\n                    for (x = 0; x < rows.length; x++) {\n                        arr[x] = arr[x] || {}\n                        // Iterate columns\n                        for (i = 0; i < headers.length; i++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                                this.columns(headers[i].originalCellIndex).visible()\n                            ) {\n                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                            }\n                        }\n                    }\n\n                    // Convert the array of objects to JSON string\n                    str = JSON.stringify(arr, options.replacer, options.space)\n\n                    if (options.download) {\n                        str = `data:application/json;charset=utf-8,${str}`\n                    }\n                }\n\n                // Download\n                if (options.download) {\n                    // Filename\n                    options.filename = options.filename || \"datatable_export\"\n                    options.filename += `.${options.type}`\n\n                    str = encodeURI(str)\n\n                    // Create a link to trigger the download\n                    link = document.createElement(\"a\")\n                    link.href = str\n                    link.download = options.filename\n\n                    // Append the link\n                    document.body.appendChild(link)\n\n                    // Trigger the download\n                    link.click()\n\n                    // Remove the link\n                    document.body.removeChild(link)\n                }\n\n                return str\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Import data to the table\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    import(userOptions) {\n        let obj = false\n        const defaults = {\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\"\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.data.length || isObject(options.data)) {\n            // Import CSV\n            if (options.type === \"csv\") {\n                obj = {\n                    data: []\n                }\n\n                // Split the string into rows\n                const rows = options.data.split(options.lineDelimiter)\n\n                if (rows.length) {\n\n                    if (options.headings) {\n                        obj.headings = rows[0].split(options.columnDelimiter)\n\n                        rows.shift()\n                    }\n\n                    rows.forEach((row, i) => {\n                        obj.data[i] = []\n\n                        // Split the rows into values\n                        const values = row.split(options.columnDelimiter)\n\n                        if (values.length) {\n                            values.forEach(value => {\n                                obj.data[i].push(value)\n                            })\n                        }\n                    })\n                }\n            } else if (options.type === \"json\") {\n                const json = isJson(options.data)\n\n                // Valid JSON string\n                if (json) {\n                    obj = {\n                        headings: [],\n                        data: []\n                    }\n\n                    json.forEach((data, i) => {\n                        obj.data[i] = []\n                        Object.entries(data).forEach(([column, value]) => {\n                            if (!obj.headings.includes(column)) {\n                                obj.headings.push(column)\n                            }\n\n                            obj.data[i].push(value)\n                        })\n                    })\n                } else {\n                    // console.warn(\"That's not valid JSON!\")\n                }\n            }\n\n            if (isObject(options.data)) {\n                obj = options.data\n            }\n\n            if (obj) {\n                // Add the rows\n                this.insert(obj)\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.render(\"pager\")\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Columns API access\n     * @return {Object} new Columns instance\n     */\n    columns(columns) {\n        return new Columns(this, columns)\n    }\n\n    /**\n     * Rows API access\n     * @return {Object} new Rows instance\n     */\n    rows(rows) {\n        return new Rows(this, rows)\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n"],"names":["isObject","val","Object","prototype","toString","call","isJson","str","t","JSON","parse","e","Array","isArray","createElement","nodeName","attrs","dom","document","attr","innerHTML","setAttribute","flush","el","NodeList","forEach","button","className","page","text","class","html","sortItems","a","b","c","d","length","f","value","g","h","i","truncate","ellipsis","j","k","l","classList","remove","push","children","getAttribute","Rows","constructor","dt","rows","this","build","row","tr","headings","map","td","data","appendChild","render","add","hasRows","update","columns","rebuild","select","sort","splice","dataIndex","Columns","swap","cols","x","y","order","s","cell","temp","column","cloneNode","originalCellIndex","sortable","hiddenColumns","includes","searchIndex","undefined","cells","activeHeadings","activeRows","hide","show","index","indexOf","visible","th","isNaN","insert","heading","hiddenHeader","type","format","hasOwnProperty","renderHeader","removeChild","filter","dir","init","terms","filterState","originalData","filters","rowFilter","filteredRows","from","content","hasAttribute","innerText","emit","hasHeadings","filterTerms","options","textContent","sorting","alpha","numeric","n","waitFor","then","parseDate","date","Promise","all","importedFunctions","parseFunction","top","btm","num","replace","parseFloat","Number","toLowerCase","contains","lastTh","concat","indexes","v","searchData","cellIndex","dataToTable","thead","tbody","col","Error","table","tHead","tBodies","defaultConfig","searchable","paging","perPage","perPageSelect","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","ascText","descText","truncatePager","pagerDelta","scrollY","fixedColumns","fixedHeight","header","footer","labels","placeholder","noRows","info","layout","bottom","DataTable","initialized","querySelector","initialLayout","initialSortable","prop","assign","currentPage","onFirstPage","columnRenderers","selectedColumns","setTimeout","plugins","entries","plugin","enabled","renderPage","renderPager","template","ajax","xhr","XMLHttpRequest","xhrProgress","xhrLoad","readyState","status","obj","load","responseText","import","setColumns","xhrFailed","xhrCancelled","addEventListener","open","url","send","body","head","foot","tFoot","insertBefore","slice","wrapper","wrap","selected","option","Option","outerHTML","form","w","paginator","container","pagers","querySelectorAll","label","parentNode","replaceChild","rect","getBoundingClientRect","fixHeight","fixColumns","bindEvents","totalPages","frag","createDocumentFragment","pages","clear","onLastPage","lastPage","setMessage","items","current","searching","string","prev","next","pager","links","p","firstElementChild","link","href","selector","parseInt","input","search","target","preventDefault","window","renderer","hidden","destroy","paginate","hd","columnWidths","style","height","headerTable","width","ow","offsetWidth","paddingTop","paddingBottom","border","parentElement","headercontainer","thd","paddingRight","clientWidth","scrollHeight","clientHeight","overflowY","r","widths","query","idx","inArray","split","reduce","bool","word","sortColumn","direction","refresh","parent","export","userOptions","headers","arr","download","skipColumn","lineDelimiter","columnDelimiter","tableName","replacer","space","selection","trim","substring","stringify","filename","encodeURI","click","shift","values","json","print","message","colspan","on","event","callback","events","off","apply","arguments"],"mappings":"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"}